--Answer 1
--Joind is preddered over subqueries because of its high performance.
--Answer 2
-- CTE is a temporary view. We can use CTE for recursive quaries and also wheb the scope of a table is limited.
--Answer 3
-- A table variable is a data type that can be used within a Transact-SQL batch. Table variables can be declared within batches, functions, and stored procedures.
--Answer 4
--Delete will keep all deleted rows in log while truncate permenently delets records. Delete command is slower than the Tyrncate command. Truncate is faster because it makes less use of the trancaction logs.
--Answer 5
--.Identity column is autogenerated column in a table. Identity column will not get reset to initial value incase of delete but truncate will reset value to its initial value.
--Answer 6
--"delete from table_name" -It removes all rows. COMMIT or ROLLBACK the trancaction to make change permanent or undo it
--"truncate table table_name"- It also removes all the rows but cannot be rolled back.

--Queries
--0qUESTION 1
SELECT city 
FROM Customers
WHERE city in(SELECT city FROM EmployeeS)

--Question 2a
SELECT DISTINCT city 
FROM Customers
WHERE city NOT in(SELECT DISTINCT city FROM Employees WHERE CITY IS NOT NULL)
--2b
select distinct city from Customers  
except 
select distinct city from Employees

--Question 3
SELECT ProductID, SUM(Quantity) AS QunatityOrdered 
FROM [order details]
GROUP BY ProductID

--Question 4
SELECT city, sum(Quantity) AS OrderedQuantity
FROM Orders o JOIN [Order details] od on o.orderid=od.orderid JOIN customers c ON c.customerid=o.CustomerID
GROUP BY city

--Question 5
SELECT 
FROM

--Question 6
SELECT distinct city 
FROM orders o join [order details] od on o.orderid=od.orderid join customers c on c.customerid=o.CustomerID
GROUP BY city
HAVING COUNT(*)>=2

--Question 7
SELECT DISTINCT c.CustomerID 
FROM orders o JOIN Customers c ON o.customerID = c.customerID
WHERE o.ShipCity <> c.city

--QUestion 8
SELECT TOP 5 ProductID, AVG(UnitPrice) AS TheAvg, c.City, SUM(Quantity) AS TheSum
FROM Customers c join Orders o on o.CustomerID=c.CustomerID join [Order Details] od on od.OrderID=o.OrderID 
GROUP BY ProductID, c.City
ORDER BY SUM(Quantity) DESC

--Question 9
--a
SELECT distinct City 
FROM Employees 
where city not in (SELECT ShipCity FROM Orders where ShipCity is not null)

--b
SELECT distinct City 
from Employees 
 WHERE City is not null
 except (select ShipCity FROM Orders WHERE ShipCity is not null)

 --Question 10
 SELECT
(SELECT top 1 City
FROM Orders o join [Order Details] od on o.OrderID=od.OrderID
join Employees e on e.EmployeeID = o.EmployeeID
GROUP BY e.EmployeeID,e.City
ORDER BY COUNT(*) desc) as MostOrderedCity,
(SELECT top 1 City FROM Orders o 
join [Order Details] od on o.OrderID=od.OrderID 
join Employees e on e.EmployeeID = o.EmployeeID
GROUP BY e.EmployeeID,e.City
ORDER BY sum(Quantity) DESC) as MostQunatitySoldCity

--11 We can remove the dupicates record of a table by using group by and count(*), if count(*) is geater than 1 then delete the rows using sub quary.
--12 To find a employee who do not manage anybody we should select empid from employee rxcept mgrid from the employee.
